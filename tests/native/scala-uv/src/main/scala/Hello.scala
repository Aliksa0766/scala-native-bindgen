import scala.scalanative._

@native.link("uv")
@native.extern
object uv {
  type enum_ = native.CInt
  val enum__UV_E2BIG = 0
  val enum__UV_EACCES = 1
  val enum__UV_EADDRINUSE = 2
  val enum__UV_EADDRNOTAVAIL = 3
  val enum__UV_EAFNOSUPPORT = 4
  val enum__UV_EAGAIN = 5
  val enum__UV_EAI_ADDRFAMILY = 6
  val enum__UV_EAI_AGAIN = 7
  val enum__UV_EAI_BADFLAGS = 8
  val enum__UV_EAI_BADHINTS = 9
  val enum__UV_EAI_CANCELED = 10
  val enum__UV_EAI_FAIL = 11
  val enum__UV_EAI_FAMILY = 12
  val enum__UV_EAI_MEMORY = 13
  val enum__UV_EAI_NODATA = 14
  val enum__UV_EAI_NONAME = 15
  val enum__UV_EAI_OVERFLOW = 16
  val enum__UV_EAI_PROTOCOL = 17
  val enum__UV_EAI_SERVICE = 18
  val enum__UV_EAI_SOCKTYPE = 19
  val enum__UV_EALREADY = 20
  val enum__UV_EBADF = 21
  val enum__UV_EBUSY = 22
  val enum__UV_ECANCELED = 23
  val enum__UV_ECHARSET = 24
  val enum__UV_ECONNABORTED = 25
  val enum__UV_ECONNREFUSED = 26
  val enum__UV_ECONNRESET = 27
  val enum__UV_EDESTADDRREQ = 28
  val enum__UV_EEXIST = 29
  val enum__UV_EFAULT = 30
  val enum__UV_EFBIG = 31
  val enum__UV_EHOSTUNREACH = 32
  val enum__UV_EINTR = 33
  val enum__UV_EINVAL = 34
  val enum__UV_EIO = 35
  val enum__UV_EISCONN = 36
  val enum__UV_EISDIR = 37
  val enum__UV_ELOOP = 38
  val enum__UV_EMFILE = 39
  val enum__UV_EMSGSIZE = 40
  val enum__UV_ENAMETOOLONG = 41
  val enum__UV_ENETDOWN = 42
  val enum__UV_ENETUNREACH = 43
  val enum__UV_ENFILE = 44
  val enum__UV_ENOBUFS = 45
  val enum__UV_ENODEV = 46
  val enum__UV_ENOENT = 47
  val enum__UV_ENOMEM = 48
  val enum__UV_ENONET = 49
  val enum__UV_ENOPROTOOPT = 50
  val enum__UV_ENOSPC = 51
  val enum__UV_ENOSYS = 52
  val enum__UV_ENOTCONN = 53
  val enum__UV_ENOTDIR = 54
  val enum__UV_ENOTEMPTY = 55
  val enum__UV_ENOTSOCK = 56
  val enum__UV_ENOTSUP = 57
  val enum__UV_EPERM = 58
  val enum__UV_EPIPE = 59
  val enum__UV_EPROTO = 60
  val enum__UV_EPROTONOSUPPORT = 61
  val enum__UV_EPROTOTYPE = 62
  val enum__UV_ERANGE = 63
  val enum__UV_EROFS = 64
  val enum__UV_ESHUTDOWN = 65
  val enum__UV_ESPIPE = 66
  val enum__UV_ESRCH = 67
  val enum__UV_ETIMEDOUT = 68
  val enum__UV_ETXTBSY = 69
  val enum__UV_EXDEV = 70
  val enum__UV_UNKNOWN = 71
  val enum__UV_EOF = 72
  val enum__UV_ENXIO = 73
  val enum__UV_EMLINK = 74
  val enum__UV_EHOSTDOWN = 75
  val enum__UV_ERRNO_MAX = 76
  type enum_ = native.CInt
  val enum__UV_UNKNOWN_HANDLE = 0
  val enum__UV_ASYNC = 1
  val enum__UV_CHECK = 2
  val enum__UV_FS_EVENT = 3
  val enum__UV_FS_POLL = 4
  val enum__UV_HANDLE = 5
  val enum__UV_IDLE = 6
  val enum__UV_NAMED_PIPE = 7
  val enum__UV_POLL = 8
  val enum__UV_PREPARE = 9
  val enum__UV_PROCESS = 10
  val enum__UV_STREAM = 11
  val enum__UV_TCP = 12
  val enum__UV_TIMER = 13
  val enum__UV_TTY = 14
  val enum__UV_UDP = 15
  val enum__UV_SIGNAL = 16
  val enum__UV_FILE = 17
  val enum__UV_HANDLE_TYPE_MAX = 18
  type enum_ = native.CInt
  val enum__UV_UNKNOWN_REQ = 0
  val enum__UV_REQ = 1
  val enum__UV_CONNECT = 2
  val enum__UV_WRITE = 3
  val enum__UV_SHUTDOWN = 4
  val enum__UV_UDP_SEND = 5
  val enum__UV_FS = 6
  val enum__UV_WORK = 7
  val enum__UV_GETADDRINFO = 8
  val enum__UV_GETNAMEINFO = 9
  val enum__UV_REQ_TYPE_PRIVATE = 10
  val enum__UV_REQ_TYPE_MAX = 11
  type struct_uv_loop_s = native.CStruct0[]
  type uv_loop_t = struct_uv_loop_s
  type struct_uv_handle_s = native.CStruct0[]
  type uv_handle_t = struct_uv_handle_s
  type struct_uv_stream_s = native.CStruct0[]
  type uv_stream_t = struct_uv_stream_s
  type struct_uv_tcp_s = native.CStruct0[]
  type uv_tcp_t = struct_uv_tcp_s
  type struct_uv_udp_s = native.CStruct0[]
  type uv_udp_t = struct_uv_udp_s
  type struct_uv_pipe_s = native.CStruct0[]
  type uv_pipe_t = struct_uv_pipe_s
  type struct_uv_tty_s = native.CStruct0[]
  type uv_tty_t = struct_uv_tty_s
  type struct_uv_poll_s = native.CStruct0[]
  type uv_poll_t = struct_uv_poll_s
  type struct_uv_timer_s = native.CStruct0[]
  type uv_timer_t = struct_uv_timer_s
  type struct_uv_prepare_s = native.CStruct0[]
  type uv_prepare_t = struct_uv_prepare_s
  type struct_uv_check_s = native.CStruct0[]
  type uv_check_t = struct_uv_check_s
  type struct_uv_idle_s = native.CStruct0[]
  type uv_idle_t = struct_uv_idle_s
  type struct_uv_async_s = native.CStruct0[]
  type uv_async_t = struct_uv_async_s
  type struct_uv_process_s = native.CStruct0[]
  type uv_process_t = struct_uv_process_s
  type struct_uv_fs_event_s = native.CStruct0[]
  type uv_fs_event_t = struct_uv_fs_event_s
  type struct_uv_fs_poll_s = native.CStruct0[]
  type uv_fs_poll_t = struct_uv_fs_poll_s
  type struct_uv_signal_s = native.CStruct0[]
  type uv_signal_t = struct_uv_signal_s
  type struct_uv_req_s = native.CStruct0[]
  type uv_req_t = struct_uv_req_s
  type struct_uv_getaddrinfo_s = native.CStruct0[]
  type uv_getaddrinfo_t = struct_uv_getaddrinfo_s
  type struct_uv_getnameinfo_s = native.CStruct0[]
  type uv_getnameinfo_t = struct_uv_getnameinfo_s
  type struct_uv_shutdown_s = native.CStruct0[]
  type uv_shutdown_t = struct_uv_shutdown_s
  type struct_uv_write_s = native.CStruct0[]
  type uv_write_t = struct_uv_write_s
  type struct_uv_connect_s = native.CStruct0[]
  type uv_connect_t = struct_uv_connect_s
  type struct_uv_udp_send_s = native.CStruct0[]
  type uv_udp_send_t = struct_uv_udp_send_s
  type struct_uv_fs_s = native.CStruct0[]
  type uv_fs_t = struct_uv_fs_s
  type struct_uv_work_s = native.CStruct0[]
  type uv_work_t = struct_uv_work_s
  type struct_uv_cpu_info_s = native.CStruct0[]
  type uv_cpu_info_t = struct_uv_cpu_info_s
  type struct_uv_interface_address_s = native.CStruct0[]
  type uv_interface_address_t = struct_uv_interface_address_s
  type struct_uv_dirent_s = native.CStruct0[]
  type uv_dirent_t = struct_uv_dirent_s
  type enum_ = native.CInt
  val enum__UV_LOOP_BLOCK_SIGNAL = 0
  type uv_loop_option = enum uv_loop_option
  type enum_ = native.CInt
  val enum__UV_RUN_DEFAULT = 0
  val enum__UV_RUN_ONCE = 1
  val enum__UV_RUN_NOWAIT = 2
  type uv_run_mode = enum uv_run_mode
  def uv_version(): native.CUnsignedInt = native.extern
  def uv_version_string(): native.Ptr[native.CChar] = native.extern
  type uv_malloc_func = native.Ptr[void *(int)]
  type uv_realloc_func = native.Ptr[void *(void *, int)]
  type uv_calloc_func = native.Ptr[void *(int, int)]
  type uv_free_func = native.Ptr[void (void *)]
  def uv_replace_allocator(malloc_func: native.Ptr[void *(int)], realloc_func: native.Ptr[void *(void *, int)], calloc_func: native.Ptr[void *(int, int)], free_func: native.Ptr[void (void *)]): native.CInt = native.extern
  def uv_default_loop(): native.Ptr[uv_loop_t] = native.extern
  def uv_loop_init(loop: native.Ptr[uv_loop_t]): native.CInt = native.extern
  def uv_loop_close(loop: native.Ptr[uv_loop_t]): native.CInt = native.extern
  def uv_loop_new(): native.Ptr[uv_loop_t] = native.extern
  def uv_loop_delete(: native.Ptr[uv_loop_t]): Unit = native.extern
  def uv_loop_size(): native.CInt = native.extern
  def uv_loop_alive(loop: native.Ptr[const uv_loop_t]): native.CInt = native.extern
  def uv_loop_configure(loop: native.Ptr[uv_loop_t], option: uv_loop_option): native.CInt = native.extern
  def uv_run(: native.Ptr[uv_loop_t], mode: uv_run_mode): native.CInt = native.extern
  def uv_stop(: native.Ptr[uv_loop_t]): Unit = native.extern
  def uv_ref(: native.Ptr[uv_handle_t]): Unit = native.extern
  def uv_unref(: native.Ptr[uv_handle_t]): Unit = native.extern
  def uv_has_ref(: native.Ptr[const uv_handle_t]): native.CInt = native.extern
  def uv_update_time(: native.Ptr[uv_loop_t]): Unit = native.extern
  def uv_now(: native.Ptr[const uv_loop_t]): native.CInt = native.extern
  def uv_backend_fd(: native.Ptr[const uv_loop_t]): native.CInt = native.extern
  def uv_backend_timeout(: native.Ptr[const uv_loop_t]): native.CInt = native.extern
  type uv_alloc_cb = native.Ptr[void (uv_handle_t *, int, int *)]
  type uv_read_cb = native.Ptr[void (uv_stream_t *, int, const int *)]
  type uv_write_cb = native.Ptr[void (uv_write_t *, int)]
  type uv_connect_cb = native.Ptr[void (uv_connect_t *, int)]
  type uv_shutdown_cb = native.Ptr[void (uv_shutdown_t *, int)]
  type uv_connection_cb = native.Ptr[void (uv_stream_t *, int)]
  type uv_close_cb = native.Ptr[void (uv_handle_t *)]
  type uv_poll_cb = native.Ptr[void (uv_poll_t *, int, int)]
  type uv_timer_cb = native.Ptr[void (uv_timer_t *)]
  type uv_async_cb = native.Ptr[void (uv_async_t *)]
  type uv_prepare_cb = native.Ptr[void (uv_prepare_t *)]
  type uv_check_cb = native.Ptr[void (uv_check_t *)]
  type uv_idle_cb = native.Ptr[void (uv_idle_t *)]
  type uv_exit_cb = native.Ptr[void (uv_process_t *, int, int)]
  type uv_walk_cb = native.Ptr[void (uv_handle_t *, void *)]
  type uv_fs_cb = native.Ptr[void (uv_fs_t *)]
  type uv_work_cb = native.Ptr[void (uv_work_t *)]
  type uv_after_work_cb = native.Ptr[void (uv_work_t *, int)]
  type uv_getaddrinfo_cb = native.Ptr[void (uv_getaddrinfo_t *, int, struct addrinfo *)]
  type uv_getnameinfo_cb = native.Ptr[void (uv_getnameinfo_t *, int, const char *, const char *)]
  type struct_uv_timespec_t = native.CStruct2[native.CLong,native.CLong]
  type uv_timespec_t = struct_uv_timespec_t
  type struct_struct (anonymous at /home/marius/clang-llvm/build2/uv.h:309:9) = native.CStruct16[native.CInt,native.CInt,native.CInt,native.CInt,native.CInt,native.CInt,native.CInt,native.CInt,native.CInt,native.CInt,native.CInt,native.CInt,uv_timespec_t,uv_timespec_t,uv_timespec_t,uv_timespec_t]
  type uv_stat_t = struct (anonymous struct at /home/marius/clang-llvm/build2/uv.h:309:9)
  type uv_fs_event_cb = native.Ptr[void (uv_fs_event_t *, const char *, int, int)]
  type uv_fs_poll_cb = native.Ptr[void (uv_fs_poll_t *, int, const uv_stat_t *, const uv_stat_t *)]
  type uv_signal_cb = native.Ptr[void (uv_signal_t *, int)]
  type enum_ = native.CInt
  val enum__UV_LEAVE_GROUP = 0
  val enum__UV_JOIN_GROUP = 1
  type uv_membership = enum uv_membership
  def uv_strerror(err: native.CInt): native.Ptr[native.CChar] = native.extern
  def uv_err_name(err: native.CInt): native.Ptr[native.CChar] = native.extern
  type struct_uv_req_s = native.CStruct5[native.Ptr[Unit],uv_req_type,void *[2],void *[4],native.CInt]
  type struct_uv_shutdown_s = native.CStruct7[native.Ptr[Unit],uv_req_type,void *[2],void *[4],native.CInt,native.Ptr[void (uv_shutdown_t *, int)],native.CInt]
  type struct_uv_handle_s = native.CStruct7[native.Ptr[Unit],native.Ptr[uv_loop_t],uv_handle_type,native.Ptr[void (uv_handle_t *)],void *[2],union (anonymous union at /home/marius/clang-llvm/build2/uv.h:401:3),native.CInt]
  type union_NULL TYPE = native.CArray[native.Byte, 256]
  def uv_handle_size(type: uv_handle_type): native.CInt = native.extern
  def uv_req_size(type: uv_req_type): native.CInt = native.extern
  def uv_is_active(handle: native.Ptr[const uv_handle_t]): native.CInt = native.extern
  def uv_walk(loop: native.Ptr[uv_loop_t], walk_cb: native.Ptr[void (uv_handle_t *, void *)], arg: native.Ptr[Unit]): Unit = native.extern
  def uv_print_all_handles(loop: native.Ptr[uv_loop_t], stream: native.Ptr[native.CInt]): Unit = native.extern
  def uv_print_active_handles(loop: native.Ptr[uv_loop_t], stream: native.Ptr[native.CInt]): Unit = native.extern
  def uv_close(handle: native.Ptr[uv_handle_t], close_cb: native.Ptr[void (uv_handle_t *)]): Unit = native.extern
  def uv_send_buffer_size(handle: native.Ptr[uv_handle_t], value: native.Ptr[native.CInt]): native.CInt = native.extern
  def uv_recv_buffer_size(handle: native.Ptr[uv_handle_t], value: native.Ptr[native.CInt]): native.CInt = native.extern
  def uv_fileno(handle: native.Ptr[const uv_handle_t], fd: native.Ptr[native.CInt]): native.CInt = native.extern
  def uv_buf_init(base: native.Ptr[native.CChar], len: native.CUnsignedInt): native.CInt = native.extern
  type struct_uv_stream_s = native.CStruct10[native.Ptr[Unit],native.Ptr[uv_loop_t],uv_handle_type,native.Ptr[void (uv_handle_t *)],void *[2],union (anonymous union at /home/marius/clang-llvm/build2/uv.h:441:3),native.CInt,native.Ptr[void (uv_handle_t *, int, int *)],native.Ptr[void (uv_stream_t *, int, const int *)],native.CInt]
  type union_NULL TYPE = native.CArray[native.Byte, 256]
  def uv_listen(stream: native.Ptr[uv_stream_t], backlog: native.CInt, cb: native.Ptr[void (uv_stream_t *, int)]): native.CInt = native.extern
  def uv_accept(server: native.Ptr[uv_stream_t], client: native.Ptr[uv_stream_t]): native.CInt = native.extern
  def uv_read_start(: native.Ptr[uv_stream_t], alloc_cb: native.Ptr[void (uv_handle_t *, int, int *)], read_cb: native.Ptr[void (uv_stream_t *, int, const int *)]): native.CInt = native.extern
  def uv_read_stop(: native.Ptr[uv_stream_t]): native.CInt = native.extern
  def uv_write(req: native.Ptr[uv_write_t], handle: native.Ptr[uv_stream_t], bufs: native.Ptr[native.CInt], nbufs: native.CUnsignedInt, cb: native.Ptr[void (uv_write_t *, int)]): native.CInt = native.extern
  def uv_write2(req: native.Ptr[uv_write_t], handle: native.Ptr[uv_stream_t], bufs: native.Ptr[native.CInt], nbufs: native.CUnsignedInt, send_handle: native.Ptr[uv_stream_t], cb: native.Ptr[void (uv_write_t *, int)]): native.CInt = native.extern
  def uv_try_write(handle: native.Ptr[uv_stream_t], bufs: native.Ptr[native.CInt], nbufs: native.CUnsignedInt): native.CInt = native.extern
  type struct_uv_write_s = native.CStruct8[native.Ptr[Unit],uv_req_type,void *[2],void *[4],native.CInt,native.Ptr[uv_stream_t],native.Ptr[uv_stream_t],native.CInt]
  def uv_is_readable(handle: native.Ptr[const uv_stream_t]): native.CInt = native.extern
  def uv_is_writable(handle: native.Ptr[const uv_stream_t]): native.CInt = native.extern
  def uv_stream_set_blocking(handle: native.Ptr[uv_stream_t], blocking: native.CInt): native.CInt = native.extern
  def uv_is_closing(handle: native.Ptr[const uv_handle_t]): native.CInt = native.extern
  type struct_uv_tcp_s = native.CStruct10[native.Ptr[Unit],native.Ptr[uv_loop_t],uv_handle_type,native.Ptr[void (uv_handle_t *)],void *[2],union (anonymous union at /home/marius/clang-llvm/build2/uv.h:492:3),native.CInt,native.Ptr[void (uv_handle_t *, int, int *)],native.Ptr[void (uv_stream_t *, int, const int *)],native.CInt]
  type union_NULL TYPE = native.CArray[native.Byte, 256]
  def uv_tcp_init(: native.Ptr[uv_loop_t], handle: native.Ptr[uv_tcp_t]): native.CInt = native.extern
  def uv_tcp_init_ex(: native.Ptr[uv_loop_t], handle: native.Ptr[uv_tcp_t], flags: native.CUnsignedInt): native.CInt = native.extern
  def uv_tcp_open(handle: native.Ptr[uv_tcp_t], sock: native.CInt): native.CInt = native.extern
  def uv_tcp_nodelay(handle: native.Ptr[uv_tcp_t], enable: native.CInt): native.CInt = native.extern
  def uv_tcp_keepalive(handle: native.Ptr[uv_tcp_t], enable: native.CInt, delay: native.CUnsignedInt): native.CInt = native.extern
  def uv_tcp_simultaneous_accepts(handle: native.Ptr[uv_tcp_t], enable: native.CInt): native.CInt = native.extern
  type enum_uv_tcp_flags = native.CInt
  val enum_uv_tcp_flags_UV_TCP_IPV6ONLY = 0
  def uv_tcp_bind(handle: native.Ptr[uv_tcp_t], addr: native.Ptr[const struct sockaddr], flags: native.CUnsignedInt): native.CInt = native.extern
  def uv_tcp_getsockname(handle: native.Ptr[const uv_tcp_t], name: native.Ptr[struct sockaddr], namelen: native.Ptr[native.CInt]): native.CInt = native.extern
  def uv_tcp_getpeername(handle: native.Ptr[const uv_tcp_t], name: native.Ptr[struct sockaddr], namelen: native.Ptr[native.CInt]): native.CInt = native.extern
  def uv_tcp_connect(req: native.Ptr[uv_connect_t], handle: native.Ptr[uv_tcp_t], addr: native.Ptr[const struct sockaddr], cb: native.Ptr[void (uv_connect_t *, int)]): native.CInt = native.extern
  type struct_uv_connect_s = native.CStruct7[native.Ptr[Unit],uv_req_type,void *[2],void *[4],native.CInt,native.Ptr[uv_stream_t],native.CInt]
  type enum_uv_udp_flags = native.CInt
  val enum_uv_udp_flags_UV_UDP_IPV6ONLY = 0
  val enum_uv_udp_flags_UV_UDP_PARTIAL = 1
  val enum_uv_udp_flags_UV_UDP_REUSEADDR = 2
  type uv_udp_send_cb = native.Ptr[void (uv_udp_send_t *, int)]
  type uv_udp_recv_cb = native.Ptr[void (uv_udp_t *, int, const int *, const struct sockaddr *, unsigned int)]
  type struct_uv_udp_s = native.CStruct9[native.Ptr[Unit],native.Ptr[uv_loop_t],uv_handle_type,native.Ptr[void (uv_handle_t *)],void *[2],union (anonymous union at /home/marius/clang-llvm/build2/uv.h:566:3),native.CInt,native.CInt,native.CInt]
  type union_NULL TYPE = native.CArray[native.Byte, 256]
  type struct_uv_udp_send_s = native.CStruct7[native.Ptr[Unit],uv_req_type,void *[2],void *[4],native.CInt,native.Ptr[void (uv_udp_send_t *, int)],native.CInt]
  def uv_udp_init(: native.Ptr[uv_loop_t], handle: native.Ptr[uv_udp_t]): native.CInt = native.extern
  def uv_udp_init_ex(: native.Ptr[uv_loop_t], handle: native.Ptr[uv_udp_t], flags: native.CUnsignedInt): native.CInt = native.extern
  def uv_udp_open(handle: native.Ptr[uv_udp_t], sock: native.CInt): native.CInt = native.extern
  def uv_udp_bind(handle: native.Ptr[uv_udp_t], addr: native.Ptr[const struct sockaddr], flags: native.CUnsignedInt): native.CInt = native.extern
  def uv_udp_getsockname(handle: native.Ptr[const uv_udp_t], name: native.Ptr[struct sockaddr], namelen: native.Ptr[native.CInt]): native.CInt = native.extern
  def uv_udp_set_membership(handle: native.Ptr[uv_udp_t], multicast_addr: native.Ptr[native.CChar], interface_addr: native.Ptr[native.CChar], membership: uv_membership): native.CInt = native.extern
  def uv_udp_set_multicast_loop(handle: native.Ptr[uv_udp_t], on: native.CInt): native.CInt = native.extern
  def uv_udp_set_multicast_ttl(handle: native.Ptr[uv_udp_t], ttl: native.CInt): native.CInt = native.extern
  def uv_udp_set_multicast_interface(handle: native.Ptr[uv_udp_t], interface_addr: native.Ptr[native.CChar]): native.CInt = native.extern
  def uv_udp_set_broadcast(handle: native.Ptr[uv_udp_t], on: native.CInt): native.CInt = native.extern
  def uv_udp_set_ttl(handle: native.Ptr[uv_udp_t], ttl: native.CInt): native.CInt = native.extern
  def uv_udp_send(req: native.Ptr[uv_udp_send_t], handle: native.Ptr[uv_udp_t], bufs: native.Ptr[native.CInt], nbufs: native.CUnsignedInt, addr: native.Ptr[const struct sockaddr], send_cb: native.Ptr[void (uv_udp_send_t *, int)]): native.CInt = native.extern
  def uv_udp_try_send(handle: native.Ptr[uv_udp_t], bufs: native.Ptr[native.CInt], nbufs: native.CUnsignedInt, addr: native.Ptr[const struct sockaddr]): native.CInt = native.extern
  def uv_udp_recv_start(handle: native.Ptr[uv_udp_t], alloc_cb: native.Ptr[void (uv_handle_t *, int, int *)], recv_cb: native.Ptr[void (uv_udp_t *, int, const int *, const struct sockaddr *, unsigned int)]): native.CInt = native.extern
  def uv_udp_recv_stop(handle: native.Ptr[uv_udp_t]): native.CInt = native.extern
  type struct_uv_tty_s = native.CStruct10[native.Ptr[Unit],native.Ptr[uv_loop_t],uv_handle_type,native.Ptr[void (uv_handle_t *)],void *[2],union (anonymous union at /home/marius/clang-llvm/build2/uv.h:630:3),native.CInt,native.Ptr[void (uv_handle_t *, int, int *)],native.Ptr[void (uv_stream_t *, int, const int *)],native.CInt]
  type union_NULL TYPE = native.CArray[native.Byte, 256]
  type enum_ = native.CInt
  val enum__UV_TTY_MODE_NORMAL = 0
  val enum__UV_TTY_MODE_RAW = 1
  val enum__UV_TTY_MODE_IO = 2
  type uv_tty_mode_t = enum uv_tty_mode_t
  def uv_tty_init(: native.Ptr[uv_loop_t], : native.Ptr[uv_tty_t], fd: native.CInt, readable: native.CInt): native.CInt = native.extern
  def uv_tty_set_mode(: native.Ptr[uv_tty_t], mode: uv_tty_mode_t): native.CInt = native.extern
  def uv_tty_reset_mode(): native.CInt = native.extern
  def uv_tty_get_winsize(: native.Ptr[uv_tty_t], width: native.Ptr[native.CInt], height: native.Ptr[native.CInt]): native.CInt = native.extern
  def uv_guess_handle(file: native.CInt): uv_handle_type = native.extern
  type struct_uv_pipe_s = native.CStruct11[native.Ptr[Unit],native.Ptr[uv_loop_t],uv_handle_type,native.Ptr[void (uv_handle_t *)],void *[2],union (anonymous union at /home/marius/clang-llvm/build2/uv.h:668:3),native.CInt,native.Ptr[void (uv_handle_t *, int, int *)],native.Ptr[void (uv_stream_t *, int, const int *)],native.CInt,native.CInt]
  type union_NULL TYPE = native.CArray[native.Byte, 256]
  def uv_pipe_init(: native.Ptr[uv_loop_t], handle: native.Ptr[uv_pipe_t], ipc: native.CInt): native.CInt = native.extern
  def uv_pipe_open(: native.Ptr[uv_pipe_t], file: native.CInt): native.CInt = native.extern
  def uv_pipe_bind(handle: native.Ptr[uv_pipe_t], name: native.Ptr[native.CChar]): native.CInt = native.extern
  def uv_pipe_connect(req: native.Ptr[uv_connect_t], handle: native.Ptr[uv_pipe_t], name: native.Ptr[native.CChar], cb: native.Ptr[void (uv_connect_t *, int)]): Unit = native.extern
  def uv_pipe_getsockname(handle: native.Ptr[const uv_pipe_t], buffer: native.Ptr[native.CChar], size: native.Ptr[native.CInt]): native.CInt = native.extern
  def uv_pipe_getpeername(handle: native.Ptr[const uv_pipe_t], buffer: native.Ptr[native.CChar], size: native.Ptr[native.CInt]): native.CInt = native.extern
  def uv_pipe_pending_instances(handle: native.Ptr[uv_pipe_t], count: native.CInt): Unit = native.extern
  def uv_pipe_pending_count(handle: native.Ptr[uv_pipe_t]): native.CInt = native.extern
  def uv_pipe_pending_type(handle: native.Ptr[uv_pipe_t]): uv_handle_type = native.extern
  type struct_uv_poll_s = native.CStruct8[native.Ptr[Unit],native.Ptr[uv_loop_t],uv_handle_type,native.Ptr[void (uv_handle_t *)],void *[2],union (anonymous union at /home/marius/clang-llvm/build2/uv.h:693:3),native.CInt,native.CInt]
  type union_NULL TYPE = native.CArray[native.Byte, 256]
  type enum_uv_poll_event = native.CInt
  val enum_uv_poll_event_UV_READABLE = 0
  val enum_uv_poll_event_UV_WRITABLE = 1
  def uv_poll_init(loop: native.Ptr[uv_loop_t], handle: native.Ptr[uv_poll_t], fd: native.CInt): native.CInt = native.extern
  def uv_poll_init_socket(loop: native.Ptr[uv_loop_t], handle: native.Ptr[uv_poll_t], socket: native.CInt): native.CInt = native.extern
  def uv_poll_start(handle: native.Ptr[uv_poll_t], events: native.CInt, cb: native.Ptr[void (uv_poll_t *, int, int)]): native.CInt = native.extern
  def uv_poll_stop(handle: native.Ptr[uv_poll_t]): native.CInt = native.extern
  type struct_uv_prepare_s = native.CStruct7[native.Ptr[Unit],native.Ptr[uv_loop_t],uv_handle_type,native.Ptr[void (uv_handle_t *)],void *[2],union (anonymous union at /home/marius/clang-llvm/build2/uv.h:712:3),native.CInt]
  type union_NULL TYPE = native.CArray[native.Byte, 256]
  def uv_prepare_init(: native.Ptr[uv_loop_t], prepare: native.Ptr[uv_prepare_t]): native.CInt = native.extern
  def uv_prepare_start(prepare: native.Ptr[uv_prepare_t], cb: native.Ptr[void (uv_prepare_t *)]): native.CInt = native.extern
  def uv_prepare_stop(prepare: native.Ptr[uv_prepare_t]): native.CInt = native.extern
  type struct_uv_check_s = native.CStruct7[native.Ptr[Unit],native.Ptr[uv_loop_t],uv_handle_type,native.Ptr[void (uv_handle_t *)],void *[2],union (anonymous union at /home/marius/clang-llvm/build2/uv.h:722:3),native.CInt]
  type union_NULL TYPE = native.CArray[native.Byte, 256]
  def uv_check_init(: native.Ptr[uv_loop_t], check: native.Ptr[uv_check_t]): native.CInt = native.extern
  def uv_check_start(check: native.Ptr[uv_check_t], cb: native.Ptr[void (uv_check_t *)]): native.CInt = native.extern
  def uv_check_stop(check: native.Ptr[uv_check_t]): native.CInt = native.extern
  type struct_uv_idle_s = native.CStruct7[native.Ptr[Unit],native.Ptr[uv_loop_t],uv_handle_type,native.Ptr[void (uv_handle_t *)],void *[2],union (anonymous union at /home/marius/clang-llvm/build2/uv.h:732:3),native.CInt]
  type union_NULL TYPE = native.CArray[native.Byte, 256]
  def uv_idle_init(: native.Ptr[uv_loop_t], idle: native.Ptr[uv_idle_t]): native.CInt = native.extern
  def uv_idle_start(idle: native.Ptr[uv_idle_t], cb: native.Ptr[void (uv_idle_t *)]): native.CInt = native.extern
  def uv_idle_stop(idle: native.Ptr[uv_idle_t]): native.CInt = native.extern
  type struct_uv_async_s = native.CStruct7[native.Ptr[Unit],native.Ptr[uv_loop_t],uv_handle_type,native.Ptr[void (uv_handle_t *)],void *[2],union (anonymous union at /home/marius/clang-llvm/build2/uv.h:742:3),native.CInt]
  type union_NULL TYPE = native.CArray[native.Byte, 256]
  def uv_async_init(: native.Ptr[uv_loop_t], async: native.Ptr[uv_async_t], async_cb: native.Ptr[void (uv_async_t *)]): native.CInt = native.extern
  def uv_async_send(async: native.Ptr[uv_async_t]): native.CInt = native.extern
  type struct_uv_timer_s = native.CStruct7[native.Ptr[Unit],native.Ptr[uv_loop_t],uv_handle_type,native.Ptr[void (uv_handle_t *)],void *[2],union (anonymous union at /home/marius/clang-llvm/build2/uv.h:758:3),native.CInt]
  type union_NULL TYPE = native.CArray[native.Byte, 256]
  def uv_timer_init(: native.Ptr[uv_loop_t], handle: native.Ptr[uv_timer_t]): native.CInt = native.extern
}

object Hello extends App {
  val time = native.stackalloc[native.CDouble]
  val result = uv.uptime(time)
  //println("time: " + time + " result: " + result)
  println("Return " + result + " uptime: " + !time)
}